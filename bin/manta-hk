#!/usr/bin/env node
/* vim: set ft=javascript: */
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2015, Joyent, Inc.
 */

/*
 * manta-hk: manage Manta housekeeping operations
 */

var mod_bunyan = require('bunyan');
var mod_cmdln = require('cmdln');
var mod_cmdutil = require('cmdutil');
var mod_extsprintf = require('extsprintf');
var mod_jsprim = require('jsprim');
var mod_http = require('http');
var mod_manta = require('manta');
var mod_util = require('util');
var mod_tab = require('tab');
var printf = mod_extsprintf.printf;
var sprintf = mod_extsprintf.sprintf;

var mod_dumps = require('../lib/dumps');
var mod_metering = require('../lib/metering');
var mod_dcaudit = require('../lib/dcaudit');

/*
 * Command-line option definitions common to multiple subcommands.
 */
var mhkCommonOptions = {
    'date': {
	'names': [ 'date', 'd' ],
	'type': 'date',
	'helpArg': 'DATE',
	'help': 'Scan backwards from date DATE',
	'default': new Date()
    },
    'days': {
	'names': [ 'days', 'D' ],
	'type': 'positiveInteger',
	'helpArg': 'NDAYS',
	'help': 'Scan backwards NDAYS from DATE',
	'default': 5
    }
};

/*
 * node-cmdln boilerplate
 */
function MantaHk()
{
	mod_cmdln.Cmdln.call(this, {
	    'name': 'manta-hk',
	    'desc': 'manage Manta housekeeping operations'
	});
}

mod_util.inherits(MantaHk, mod_cmdln.Cmdln);

/*
 * Initialization: set up logger and Manta client.
 */
MantaHk.prototype.init = function (opts, args, callback)
{
	this.mhk_log = new mod_bunyan({
	    'name': 'manta-hk',
	    'level': process.env['LOG_LEVEL'] || 'error'
	});

	this.mhk_manta = mod_manta.createBinClient({
	    'log': this.mhk_log.child({ 'component': 'manta' })
	});
	/* Bad, manta client! */
	process.removeAllListeners('uncaughtException');

	callback();
};

/*
 * Cleanup: close Manta client.
 */
MantaHk.prototype.fini = function (subcmd, _, callback)
{
	this.mhk_manta.close();
	callback();
};

/*
 * manta-hk dumps: list information about recent Manatee dumps
 */
MantaHk.prototype.do_dumps = function (subcmd, opts, args, callback)
{
	var config;

	config = {
	    'endDate': opts.date,
	    'ndays': opts.days,
	    'shards': opts.shard,
	    'dumpRoot': mod_dumps.defaultDumpRoot,
	    'concurrency': 10,
	    'log': this.mhk_log,
	    'manta': this.mhk_manta
	};

	mod_dumps.listDumps(config, function (err, results) {
		if (err) {
			mod_cmdutil.fail(err);
		}

		/*
		 * XXX Should use an object with useful methods.
		 * Definitely shouldn't be reaching into DumpLister.
		 */
		var shards, dumps;
		shards = results.dl_shards;
		dumps = results.dl_dumps;
		if (!opts.gnuplot)
			printDumpsByDate(shards, dumps);
		else
			printDumpsForGnuplot(shards, dumps);
		callback();
	});
};

MantaHk.prototype.do_dumps.options = [
    mhkCommonOptions['date'],
    mhkCommonOptions['days'],
{
    'names': [ 'gnuplot' ],
    'type': 'bool',
    'help': 'Emit output as a gnuplot command and data file',
    'default': false
}, {
    'names': [ 'shard', 's' ],
    'type': 'arrayOfString',
    'helpArg': 'SHARD...',
    'help': 'Only show dumps for shards SHARD...',
    'default': null
} ];

MantaHk.prototype.do_dumps.help = [
    'List Manatee dump information.',
    '',
    'The "dumps" command reports on Manatee dumps over the given date range.',
    'In the default output mode, missing or late dumps are marked with an ',
    'asterisk ("*").  Dumps that have not been unpacked at all are marked ',
    'with an exclamation point ("!").  Note that the tool does not know ',
    'how many unpacked objects are part of each dump, so it cannot tell if ',
    'a dump has only been partially unpacked.',
    '',
    '{{options}}'
].join('\n');


function printDumpsByDate(shards, dumps)
{
	var dates, shardcols;

	dates = Object.keys(dumps).sort();
	shardcols = shards[0].length + 1;
	dates.forEach(function (timestamp) {
		var header, tsdaypart, fmt;

		tsdaypart = timestamp.substr(0, '2015-07-06'.length);
		header = sprintf('Dumps for %s', tsdaypart);
		fmt = '   %' + shardcols + 's';
		printf('%s', header);
		printf('     %' + (shardcols - header.length) +
		    's  %5s  %7s  %13s  %s\n',
		    'SHARD', 'MB', 'ELAPSED', 'ENDED', '#UNPACKED');

		shards.forEach(function (shardname) {
			var dump, mins, secs, endtime;
			var startday, endday, warnings;
			var problem, notes;

			if (!dumps[timestamp].hasOwnProperty(shardname)) {
				printf('* ' + fmt + '  MISSING\n', shardname);
				return;
			}

			dump = dumps[timestamp][shardname];
			secs = Math.ceil(dump.ended / 1000);
			mins = Math.floor(secs / 60);
			secs -= (mins * 60);

			/*
			 * Sanity-check dump times and warn if days don't match.
			 */
			startday = dump.stime.toISOString().substr(
			    0, tsdaypart.length);
			endday = dump.mtime.toISOString().substr(
			    0, tsdaypart.length);
			endtime = dump.mtime.toISOString().substr(
			    '2015-07-10T'.length);
			warnings = [];
			if (tsdaypart != startday) {
				warnings.push('started on a different day ' +
				    'than expected');
			}
			if (startday != endday) {
				warnings.push('finished on a different ' +
				    'day than started');
			}

			problem = warnings.length > 0 || !dump.unpacked;
			notes = dump.waslate;

			printf('%-2s' + fmt + '  %5d  %3dm%02ds  %13s  %d\n',
			    (problem ? '!' : '') + (notes ? '*' : ''),
			    shardname, dump.sizemb, mins, secs, endtime,
			    dump.objects.length);

			warnings.forEach(function (msg) {
				printf(' ' + fmt + '  warn: %s\n', '', msg);
			});

			if (warnings.length > 0) {
				printf('    path:  %s\n', dump.path);
				printf('    start: %s\n', dump.stime);
				printf('    done:  %s\n', dump.mtime);
				return;
			}
		});
	});
}

function printDumpsForGnuplot(shards, dumps)
{
	printf('%s\n', [
	    '#',
	    '# This file was automatically generated by "manta-hk dumps".',
	    '#',
	    'set terminal png size 1600,900',
	    'set xdata time;',
	    'set timefmt "%Y-%m-%d";',
	    'set format x "%Y/%m/%d";',
	    'set yrange [0:*];',
	    '',
	    'set multiplot title "Shard database dumps" layout 2,1'
	].join('\n'));

	/*
	 * First plot: dump time.  It would be nice to use an inline dataset,
	 * but that's only available in gnuplot 5, which isn't so widely
	 * available.
	 */
	printf('%s\n', [
	    'set title "Dump time"',
	    'set ylabel "Seconds"',
	    'plot 7200 title "Deadline", \\'
	].join('\n'));
	printGnuplotDataset(shards, dumps, function (dump) {
		return (Math.ceil(dump.ended / 1000));
	});

	/*
	 * Second plot: dump size.
	 */
	printf('%s\n', [
	    'set title "Dump size"',
	    'set ylabel "Megabytes"',
	    'plot \\'
	].join('\n'));
	printGnuplotDataset(shards, dumps, function (dump) {
		return (dump.sizemb);
	});
	printf('unset multiplot\n');
}

function printGnuplotDataset(shards, dumps, valuefunc)
{
	var dates;

	dates = Object.keys(dumps).sort();
	shards = shards.sort();

	shards.forEach(function (shardname, i) {
		printf('    "-" index "== Shard %s" ' +
		    'using 1:2 title "Shard %s" with points linetype %d%s\n',
		    shardname, shardname, 2 + i,
		    i === shards.length - 1 ? '' : ', \\');
	});

	printf('\n');
	shards.forEach(function (shardname) {
		printf('# == Shard %s\n', shardname);

		dates.forEach(function (timestamp) {
			var tsdaypart, dump;

			tsdaypart = timestamp.substr(0, '2015-07-06'.length);
			if (!dumps[timestamp].hasOwnProperty(shardname))
				return;

			dump = dumps[timestamp][shardname];
			printf('%10s  %5s\n', tsdaypart, valuefunc(dump));
		});

		printf('\n\n');
	});
}

MantaHk.prototype.do_metering_reports = function (subcmd, opts, args, callback)
{
	var config;

	config = {
	    'endDate': opts.date,
	    'ndays': opts.days,
	    'meteringRoot': mod_metering.defaultMeteringRoot,
	    'concurrency': 10,
	    'log': this.mhk_log,
	    'manta': this.mhk_manta
	};

	mod_metering.listMeteringReports(config, function (err, result) {
		if (err) {
			mod_cmdutil.fail(err);
		}

		printMeteringReports(result, opts.verbose);
		callback();
	});
};

MantaHk.prototype.do_metering_reports.options = [
    mhkCommonOptions['date'],
    mhkCommonOptions['days'], {
	'names': [ 'verbose', 'v' ],
	'type': 'bool',
	'help': 'show status of all reports (instead of a summary)',
	'default': false
    }
];

MantaHk.prototype.do_metering_reports.help = [
    'List metering reports.',
    '',
    'The "metering-reports" command looks for generated metering reports over',
    'the given date range (default: the last few days).  For storage and ',
    'summary information, the command reports the number of entries in each ',
    'report.  For compute and request metering, the command reports whether ',
    'any expected output objects are completely missing.',
    '',
    '{{options}}'
].join('\n');

function printMeteringReports(results, verbose)
{
	var dates;
	var minexpectedentries = 500;
	var maxerrors = 5;
	var maxhours = 4;

	dates = Object.keys(results.byday).sort();
	dates.forEach(function (daystamp) {
		var dayresults;

		printf('Metering reports for %s\n',
		    daystamp.substr(0, '2015-07-10'.length));
		dayresults = results.byday[daystamp];

		if (dayresults.summary === null) {
			printf('%20s  MISSING\n', 'summary report:');
		} else {
			printf('%20s  %d entries%s\n', 'summary report:',
			    dayresults.summary,
			    dayresults.summary < minexpectedentries ?
			        ' (looks too small)' : '');
		}

		if (dayresults.storage === null) {
			printf('%20s  MISSING\n', 'storage report:');
		} else {
			printf('%20s  %d entries%s\n', 'storage report:',
			    dayresults.storage,
			    dayresults.storage < minexpectedentries ?
			        ' (looks too small)' : '');
		}

		printf('%20s  %2d/%2d present', 'compute reports:',
		    dayresults.compute,
		    dayresults.compute + dayresults.compute_missing.length);
		if (dayresults.compute_missing.length > 0) {
			if (verbose) {
				printf('\n');
				dayresults.compute_missing.forEach(
				    function (h) {
					printf('%20s  hour %02d - missing\n',
					    '', h);
				    });
			} else {
				printf(' (hours missing: %s%s)\n',
				    dayresults.compute_missing.slice(
				    0, maxhours).join(', '),
				    dayresults.compute_missing.length >
				    maxhours ?  ' and ' +
				    (dayresults.compute_missing.length -
				    maxhours) + ' more' : '');
			}
		} else {
			printf('\n');
		}

		printf('%20s  %2d/%2d present', 'request reports:',
		    dayresults.request,
		    dayresults.request + dayresults.request_missing.length);
		if (dayresults.request_missing.length > 0) {
			if (verbose) {
				printf('\n');
				dayresults.request_missing.forEach(
				    function (h) {
					printf('%20s  hour %02d - missing\n',
					    '', h);
				    });
			} else {
				printf(' (hours missing: %s%s)\n',
				    dayresults.request_missing.slice(
				    0, maxhours).join(', '),
				    dayresults.request_missing.length >
				    maxhours ?  ' and ' +
				    (dayresults.request_missing.length -
				    maxhours) + ' more' : '');
			}
		} else {
			printf('\n');
		}
	});

	if (results.errors.length > 0) {
		results.errors.slice(0, maxerrors).forEach(function (error) {
			mod_cmdutil.warn(error.error);
		});

		if (results.errors.length > maxerrors) {
			mod_cmdutil.warn('and %d more errors',
			    results.errors.length - maxerrors);
		}
	}
}

MantaHk.prototype.do_dircount_audit = MantaHkDcAudit;

function MantaHkDcAudit(parent)
{
	this.dca_parent = parent;

	mod_cmdln.Cmdln.call(this, {
	    'name': 'manta-hk dircount-audit',
	    'desc': 'audit directory counts'
	});
}

mod_util.inherits(MantaHkDcAudit, mod_cmdln.Cmdln);

MantaHkDcAudit.prototype.do_launch = function (subcmd, opts, args, callback)
{
	var date;

	if (opts.date) {
		date = opts.date;
	} else {
		date = new Date();
		if (date.getUTCHours() < 8) {
			/*
			 * Before 0800Z, use yesterday's dump.  They're
			 * currently allotted two hours to upload and six hours
			 * to unpack.
			 */
			date.setUTCDate(date.getUTCDate() - 1);
		}
	}

	if (args.length === 0) {
		mod_cmdutil.fail('missing argument');
	} else if (args.length > 1) {
		mod_cmdutil.fail('unexpected arguments');
	}

	console.error('looking for database backups from %s',
	    date.toISOString());
	mod_dcaudit.launchDcAuditJob({
	    'date': new Date(),
	    'shard': args[0],
	    'dumpRoot': mod_dumps.defaultDumpRoot,
	    'log': this.dca_parent.mhk_log,
	    'manta': this.dca_parent.mhk_manta,
	    'dryRun': opts.dryrun,
	    'jobsList': mod_dcaudit.defaultJobsListPath
	}, callback);
};

MantaHkDcAudit.prototype.do_launch.options = [ {
    'names': mhkCommonOptions['date']['names'],
    'type': mhkCommonOptions['date']['type'],
    'helpArg': mhkCommonOptions['date']['helpArg'],
    'help': 'Use database dumps from date DATE'
}, {
    'names': [ 'dryrun', 'n' ],
    'type': 'bool',
    'help': 'Create job, but add no inputs so that it does nothing'
} ];

MantaHkDcAudit.prototype.do_launch.help = [
    'Launches a job to audit directory counts.',
    '',
    '    {{name}} launch [--date | -D DATE] [-n | --dryrun] SHARDNAME',
    '',
    'The Manta metadata tier keeps track of the number of entries in each ',
    'directory in order to quickly provide this information to clients.  As ',
    'a result of previous software defects, these counts could become ',
    'incorrect.  This subcommand launches one or more jobs to audit these ',
    'counts, using the daily database backups to avoid impacting the metadata ',
    'tier itself.  Use the "list" and "report" subcommands to see the results ',
    'of these jobs.',
    '',
    '{{options}}'
].join('\n');


MantaHkDcAudit.prototype.do_list = function (subcmd, opts, args, callback)
{
	mod_dcaudit.listDcAuditJobs({
	    'log': this.dca_parent.mhk_log,
	    'manta': this.dca_parent.mhk_manta,
	    'jobsList': mod_dcaudit.defaultJobsListPath
	}, function (err, joblist) {
		if (err) {
			callback(err);
			return;
		}

		var tab;

		tab = new mod_tab.TableOutputStream({
		    'columns': [ {
			'label': 'JOBID',
			'width': 36
		    }, {
			'label': 'SHARD',
			'width': 25
		    }, {
			'label': 'DUMP',
			'width': 10
		    }, {
		        'label': 'RESULT'
		    } ]
		});

		joblist['jobs'].forEach(function (job) {
			var result;


			if (job['state']) {
				switch (job['state']['state']) {
				case 'queued':
				case 'running':
					result = 'run';
					break;

				case 'done':
					if (job['state']['stats'][
					    'errors'] === 0) {
						result = 'ok';
					} else {
						result = 'fail';
					}
					break;

				default:
					result = 'unknown';
					break;
				}
			} else {
				result = 'unknown';
				mod_cmdutil.warn(job['error']);
			}

			tab.writeRow({
			    'JOBID': job['jobPath'],
			    'SHARD': job['inputShard'],
			    'DUMP': job['inputDate'].substr(
			        0, '2015-10-20'.length),
			    'RESULT': result
			});
		});

		callback();
	});
};

MantaHkDcAudit.prototype.do_list.options = [];

MantaHkDcAudit.prototype.do_list.help = [
    'Lists recent jobs to audit directory counts.',
    '',
    '    {{name}} list',
    '',
    'See help for the "{{name}} launch" for details.'
].join('\n');

mod_cmdln.main(new MantaHk());
